apiVersion: apps/v1beta2
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "4"
    field.cattle.io/creatorId: user-nr8tt
  creationTimestamp: null
  generation: 1
  labels:
    cattle.io/creator: norman
    workload.user.cattle.io/workloadselector: deployment-consumer-production-redis
  name: redis
  selfLink: /apis/apps/v1beta2/namespaces/consumer-production/deployments/redis
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-consumer-production-redis
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        cattle.io/timestamp: 2018-12-30T07:30:40Z
        field.cattle.io/ports: '[[{"containerPort":6379,"dnsName":"redis","kind":"ClusterIP","name":"6379tcp2","protocol":"TCP"}]]'
      creationTimestamp: null
      labels:
        workload.user.cattle.io/workloadselector: deployment-consumer-production-redis
    spec:
      containers:
      - args:
        - redis-server
        - --appendonly
        - "yes"
        image: redis:latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 2
          successThreshold: 1
          tcpSocket:
            port: 6379
          timeoutSeconds: 2
        name: redis
        ports:
        - containerPort: 6379
          name: 6379tcp2
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 2
          successThreshold: 2
          tcpSocket:
            port: 6379
          timeoutSeconds: 2
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: {}
          privileged: false
          procMount: Default
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        volumeMounts:
        - mountPath: /data
          name: redis-pesistance
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: redis-pesistance
        persistentVolumeClaim:
          claimName: redis-pesistance
status: {}
